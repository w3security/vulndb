diff --git a/index.js b/index.js
index b05938a..33fe69f 100644
--- a/index.js
+++ b/index.js
@@ -1,3 +1,7 @@
+const patchInternals = {
+    depth: 50
+};
+
 /**
  * Object#toString() ref for stringify().
  */
@@ -84,7 +88,7 @@ function promote(parent, key) {
   return t;
 }

-function parse(parts, parent, key, val) {
+function parse(parts, parent, key, val, depth) {
   var part = parts.shift();

   // illegal
@@ -91,7 +95,7 @@ function parse(parts, parent, key, val) {
   if (Object.getOwnPropertyDescriptor(Object.prototype, key)) return;

   // end
-  if (!part) {
+  if (!part || depth == 0) {
     if (isArray(parent[key])) {
       parent[key].push(val);
     } else if ('object' == typeof parent[key]) {
@@ -116,11 +120,14 @@
     } else if (~indexOf(part, ']')) {
       part = part.substr(0, part.length - 1);
       if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);
-      parse(parts, obj, part, val);
+      if (depth) {
+        depth--;
+      }
+      parse(parts, obj, part, val, depth);
       // key
     } else {
       if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);
-      parse(parts, obj, part, val);
+      parse(parts, obj, part, val, depth);
     }
   }
 }
@@ -134,7 +141,7 @@
     var parts = key.split('[')
       , len = parts.length
       , last = len - 1;
-    parse(parts, parent, 'base', val);
+    parse(parts, parent, 'base', val, patchInternals.depth);
     // optimize
   } else {
     if (!isint.test(key) && isArray(parent.base)) {
