// code derived from https://github.com/hapijs/qs

// https://github.com/ljharb/qs/blob/master/LICENSE
/*
Copyright (c) 2014 Nathan LaFreniere and other contributors.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * The names of any contributors may not be used to endorse or promote
      products derived from this software without specific prior written
      permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

                                  *   *   *

The complete list of contributors can be found at: https://github.com/hapijs/qs/graphs/contributors
*/

diff --git a/index.js b/index.js
index 426017b..311ce62 100644
--- a/index.js
+++ b/index.js
@@ -1,4 +1,3 @@
-
 /**
  * Object#toString() ref for stringify().
  */
@@ -6,24 +5,94 @@
 var toString = Object.prototype.toString;

 /**
+ * Object#hasOwnProperty ref
+ */
+
+var hasOwnProperty = Object.prototype.hasOwnProperty;
+
+/**
+ * Array#indexOf shim.
+ */
+
+var indexOf = typeof Array.prototype.indexOf === 'function'
+  ? function(arr, el) { return arr.indexOf(el); }
+  : function(arr, el) {
+      for (var i = 0; i < arr.length; i++) {
+        if (arr[i] === el) return i;
+      }
+      return -1;
+    };
+
+/**
+ * Array.isArray shim.
+ */
+
+var isArray = Array.isArray || function(arr) {
+  return toString.call(arr) == '[object Array]';
+};
+
+/**
+ * Object.keys shim.
+ */
+
+var objectKeys = Object.keys || function(obj) {
+  var ret = [];
+  for (var key in obj) {
+    if (obj.hasOwnProperty(key)) {
+      ret.push(key);
+    }
+  }
+  return ret;
+};
+
+/**
+ * Array#forEach shim.
+ */
+
+var forEach = typeof Array.prototype.forEach === 'function'
+  ? function(arr, fn) { return arr.forEach(fn); }
+  : function(arr, fn) {
+      for (var i = 0; i < arr.length; i++) fn(arr[i]);
+    };
+
+/**
+ * Array#reduce shim.
+ */
+
+var reduce = function(arr, fn, initial) {
+  if (typeof arr.reduce === 'function') return arr.reduce(fn, initial);
+  var res = initial;
+  for (var i = 0; i < arr.length; i++) res = fn(res, arr[i]);
+  return res;
+};
+
+/**
  * Cache non-integer test regexp.
  */

 var isint = /^[0-9]+$/;

 function promote(parent, key) {
-  if (parent[key].length == 0) return parent[key] = {};
+  if (parent[key].length == 0) return parent[key] = {}
   var t = {};
-  for (var i in parent[key]) t[i] = parent[key][i];
+  for (var i in parent[key]) {
+    if (hasOwnProperty.call(parent[key], i)) {
+      t[i] = parent[key][i];
+    }
+  }
   parent[key] = t;
   return t;
 }

 function parse(parts, parent, key, val) {
   var part = parts.shift();
+
+  // illegal
+  if (Object.getOwnPropertyDescriptor(Object.prototype, key)) return;
+
   // end
   if (!part) {
-    if (Array.isArray(parent[key])) {
+    if (isArray(parent[key])) {
       parent[key].push(val);
     } else if ('object' == typeof parent[key]) {
       parent[key] = val;
@@ -36,21 +105,21 @@
   } else {
     var obj = parent[key] = parent[key] || [];
     if (']' == part) {
-      if (Array.isArray(obj)) {
+      if (isArray(obj)) {
         if ('' != val) obj.push(val);
       } else if ('object' == typeof obj) {
-        obj[Object.keys(obj).length] = val;
+        obj[objectKeys(obj).length] = val;
       } else {
         obj = parent[key] = [parent[key], val];
       }
       // prop
-    } else if (~part.indexOf(']')) {
+    } else if (~indexOf(part, ']')) {
       part = part.substr(0, part.length - 1);
-      if (!isint.test(part) && Array.isArray(obj)) obj = promote(parent, key);
+      if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);
       parse(parts, obj, part, val);
       // key
     } else {
-      if (!isint.test(part) && Array.isArray(obj)) obj = promote(parent, key);
+      if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);
       parse(parts, obj, part, val);
     }
   }
@@ -61,14 +130,14 @@
  */

 function merge(parent, key, val){
-  if (~key.indexOf(']')) {
+  if (~indexOf(key, ']')) {
     var parts = key.split('[')
       , len = parts.length
       , last = len - 1;
     parse(parts, parent, 'base', val);
     // optimize
   } else {
-    if (!isint.test(key) && Array.isArray(parent.base)) {
+    if (!isint.test(key) && isArray(parent.base)) {
       var t = {};
       for (var k in parent.base) t[k] = parent.base[k];
       parent.base = t;
@@ -80,15 +149,45 @@
 }

 /**
+ * Compact sparse arrays.
+ */
+
+function compact(obj) {
+  if ('object' != typeof obj) return obj;
+
+  if (isArray(obj)) {
+    var ret = [];
+
+    for (var i in obj) {
+      if (hasOwnProperty.call(obj, i)) {
+        // We need to compact the nesting array too
+        // See https://github.com/visionmedia/node-querystring/issues/104
+        ret.push(compact(obj[i]));
+      }
+    }
+
+    return ret;
+  }
+
+  for (var key in obj) {
+    obj[key] = compact(obj[key]);
+  }
+
+  return obj;
+}
+
+/**
  * Parse the given obj.
  */

 function parseObject(obj){
   var ret = { base: {} };
-  Object.keys(obj).forEach(function(name){
+
+  forEach(objectKeys(obj), function(name){
     merge(ret, name, obj[name]);
   });
-  return ret.base;
+
+  return compact(ret.base);
 }

 /**
@@ -96,21 +195,21 @@
  */

 function parseString(str){
-  return String(str)
-    .split('&')
-    .reduce(function(ret, pair){
-      var eql = pair.indexOf('=')
-        , brace = lastBraceInKey(pair)
-        , key = pair.substr(0, brace || eql)
-        , val = pair.substr(brace || eql, pair.length)
-        , val = val.substr(val.indexOf('=') + 1, val.length);
-
-      // ?foo
-      if ('' == key) key = pair, val = '';
-      if ('' == key) return ret;
+  var ret = reduce(String(str).split('&'), function(ret, pair){
+    var eql = indexOf(pair, '=')
+      , brace = lastBraceInKey(pair)
+      , key = pair.substr(0, brace || eql)
+      , val = pair.substr(brace || eql, pair.length)
+      , val = val.substr(indexOf(val, '=') + 1, val.length);
+
+    // ?foo
+    if ('' == key) key = pair, val = '';
+    if ('' == key) return ret;
+
+    return merge(ret, decode(key), decode(val));
+  }, { base: {} }).base;

-      return merge(ret, decode(key), decode(val));
-    }, { base: {} }).base;
+  return compact(ret);
 }

 /**
@@ -137,7 +236,7 @@
  */

 var stringify = exports.stringify = function(obj, prefix) {
-  if (Array.isArray(obj)) {
+  if (isArray(obj)) {
     return stringifyArray(obj, prefix);
   } else if ('[object Object]' == toString.call(obj)) {
     return stringifyObject(obj, prefix);
@@ -191,7 +290,7 @@

 function stringifyObject(obj, prefix) {
   var ret = []
-    , keys = Object.keys(obj)
+    , keys = objectKeys(obj)
     , key;

   for (var i = 0, len = keys.length; i < len; ++i) {
@@ -221,9 +321,10 @@

 function set(obj, key, val) {
   var v = obj[key];
+  if (Object.getOwnPropertyDescriptor(Object.prototype, key)) return;
   if (undefined === v) {
     obj[key] = val;
-  } else if (Array.isArray(v)) {
+  } else if (isArray(v)) {
     v.push(val);
   } else {
     obj[key] = [v, val];
